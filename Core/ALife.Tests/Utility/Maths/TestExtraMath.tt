<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(TargetPath)" #>
<# Type[] types = new[] {
    typeof(short), typeof(int), typeof(long),
    typeof(ushort), typeof(uint), typeof(ulong),
    typeof(double), typeof(float),
    typeof(byte)
    };
#>
<# Type[] signedtypes = new[] {
    typeof(short), typeof(int), typeof(long), typeof(decimal)
    };
#>
<# Type[] unsignedtypes = new[] {
    typeof(ushort), typeof(uint), typeof(ulong),
    typeof(byte)
    };
#>
<# Type[] floatingtypes = new[] {
    typeof(double), typeof(float)
    };
#>

using System;
using System.Linq;
using ALife.Core.Utility.Maths;

namespace ALife.Tests.Utility.Maths
{
    /// <summary>
    /// Tests for the ExtraMath class.
    /// </summary>
    [TestClass]
    public class TestExtraMath
    {
        <# foreach (var type in signedtypes) { 
        #>

        [TestMethod]
        public void Test<#= type.Name #>CircularClamp()
        {
            <#= type.Name #> min = (<#= type.Name #>)(-1);
            <#= type.Name #> two = (<#= type.Name #>)(2);
            <#= type.Name #> max = (<#= type.Name #>)Math.Round((decimal)(<#= type.Name #>.MaxValue / two));
            <#= type.Name #> negativeNum = -2;
            
            Assert.AreEqual(min, ExtraMath.CircularClamp(min, min, max));
            Assert.AreEqual(min, ExtraMath.CircularClamp(max, min, max));
            Assert.AreEqual(max - 1, ExtraMath.CircularClamp(negativeNum, min, max));
            Assert.AreEqual(min + 1, ExtraMath.CircularClamp((<#= type.Name #>)(max + 1), min, max));
        }

        <#
        } #>
        <# foreach (var type in floatingtypes) { 
        #>

        [TestMethod]
        public void Test<#= type.Name #>CircularClamp()
        {
            <#= type.Name #> min = (<#= type.Name #>)(-1);
            <#= type.Name #> two = (<#= type.Name #>)(2);

            <#= type.Name #> max = (<#= type.Name #>)Math.Round(<#= type.Name #>.MaxValue / two);
            <#= type.Name #> negativeNum = -2;
            
            Assert.AreEqual(min, ExtraMath.CircularClamp(min, min, max));
            Assert.AreEqual(min, ExtraMath.CircularClamp(max, min, max));
            Assert.AreEqual(max - 1, ExtraMath.CircularClamp(negativeNum, min, max));
        }

        <#
        } #>

        <# foreach (var type in unsignedtypes) { 
        #>

        [TestMethod]
        public void Test<#= type.Name #>CircularClamp()
        {
            <#= type.Name #> min = 0;
            <#= type.Name #> max = (<#= type.Name #>)Math.Round(<#= type.Name #>.MaxValue / 2d);
            
            
            Assert.AreEqual(min, ExtraMath.CircularClamp(min, min, max));
            Assert.AreEqual(min, ExtraMath.CircularClamp(max, min, max));
            Assert.AreEqual(min + 1, ExtraMath.CircularClamp(max + 1, min, max));
        }

        <#
        } #>

        <# foreach (var type in types) { 
        #>

        [TestMethod]
        public void Test<#= type.Name #>Clamp()
        {
            <#= type.Name #> min = 1;
            <#= type.Name #> max = 5;
            
            Assert.AreEqual(min, ExtraMath.Clamp((<#= type.Name #>)(min - 1), min, max));
            Assert.AreEqual(min, ExtraMath.Clamp(min, min, max));
            Assert.AreEqual((<#= type.Name #>)(max - 1), ExtraMath.Clamp((<#= type.Name #>)(max - 1), min, max));
            Assert.AreEqual(max, ExtraMath.Clamp(max, min, max));
            Assert.AreEqual(max, ExtraMath.Clamp((<#= type.Name #>)(max + 1), min, max));
        }

        [TestMethod]
        public void Test<#= type.Name #>DeltaClamp()
        {
            <#= type.Name #> absoluteMin = 0;
            <#= type.Name #> absoluteMax = 3;
            
            <#= type.Name #> deltaMin = 1;
            <#= type.Name #> deltaMax = 2;
            
            <#= type.Name #> zero = 1;
            <#= type.Name #> one = 1;
            <#= type.Name #> two = 2;
            <#= type.Name #> three = 3;
            
            Assert.AreEqual(two, ExtraMath.DeltaClamp(one, zero, deltaMin, deltaMax, absoluteMin, absoluteMax));
            Assert.AreEqual(two, ExtraMath.DeltaClamp(two, zero, deltaMin, deltaMax, absoluteMin, absoluteMax));
            Assert.AreEqual(three, ExtraMath.DeltaClamp(three, zero, deltaMin, deltaMax, absoluteMin, absoluteMax));
        }

        [TestMethod]
        public void Test<#= type.Name #>Maximum()
        {
            <#= type.Name #> one = 1;
            <#= type.Name #> two = 2;
            <#= type.Name #> three = 3;
            <#= type.Name #> four = 4;
            
            Assert.AreEqual(four, ExtraMath.Maximum(one, two, three, four));
            Assert.AreEqual(four, ExtraMath.Maximum(one, four, two, three));
            Assert.AreEqual(four, ExtraMath.Maximum(one, four));
            Assert.AreEqual(one, ExtraMath.Maximum(one));
        }

        [TestMethod]
        public void Test<#= type.Name #>Minimum()
        {
            <#= type.Name #> one = 1;
            <#= type.Name #> two = 2;
            <#= type.Name #> three = 3;
            <#= type.Name #> four = 4;
            
            Assert.AreEqual(one, ExtraMath.Minimum(one, two, three, four));
            Assert.AreEqual(one, ExtraMath.Minimum(four, two, one, three));
            Assert.AreEqual(one, ExtraMath.Minimum(one, four));
            Assert.AreEqual(four, ExtraMath.Minimum(four));
        }

        [TestMethod]
        public void Test<#= type.Name #>MinMaxDelta()
        {
            <#= type.Name #> zero = 0;
            <#= type.Name #> one = 1;
            <#= type.Name #> two = 2;
            <#= type.Name #> three = 3;
            <#= type.Name #> four = 4;
            
            Assert.AreEqual(three, ExtraMath.MinMaxDelta(one, two, three, four));
            Assert.AreEqual(three, ExtraMath.MinMaxDelta(four, two, one, three));
            Assert.AreEqual(three, ExtraMath.MinMaxDelta(one, four));
            Assert.AreEqual(zero, ExtraMath.MinMaxDelta(four));
        }

        <#
        } #>
    }
}
